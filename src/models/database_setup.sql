--This file will be used to setup the base TABLE used for testing/logging
--Follow these instruction to setup the user account and schema as required, but change it for whatever new TABLE you require
--The story here is; You should have a base database called rust_application and it will make and entry called handler_logs,
--you would then add your tables with this one as a example and then add/change the username and passwords.
--This information is used in an example util handler that retrives the logs, that are generated by health check route.
--TODO: MAKE ABOVE LINE TRUE 
--Connection String example: DATABASE_URL=postgresql://acaines:!changeme!@172.22.27.92:5432/rust_application

/*

User creation and DB if required, this is all being done in the postgres cli

createuser -P test_user                     //Create the user called 'test_user'
createdb -O test_user rust_application      //Create the Database named: 'rust_application'


SQL COMMANDS TO DO THE SAME
CREATE USER test_user WITH PASSWORD 'testing';
GRANT ALL PRIVILEGES ON SCHEMA rust_application TO test_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA rust_application TO test_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA rust_application TO test_user;

*/

/* Drop if already exsists */
DROP TABLE IF EXISTS handler_logs;

/* Create the handler_logs TABLE */
create TABLE
    handler_logs (
        log_id SERIAL PRIMARY KEY,
        handler VARCHAR(250) NOT NULL,
        message VARCHAR(250),
        created_at TIMESTAMP DEFAULT now ()
    );

/* Load seed data for testing and verification */
INSERT INTO
    handler_logs (log_id, handler, message)
VALUES
    (
        1,
        'Test-Handler',
        'This message was created by testing/creation of DB'
    )
